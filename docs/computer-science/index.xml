<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Computer Science on</title><link>https://doks.netlify.app/docs/computer-science/</link><description>Recent content in Computer Science on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 14 Nov 2022 02:26:03 +0900</lastBuildDate><atom:link href="https://doks.netlify.app/docs/computer-science/index.xml" rel="self" type="application/rss+xml"/><item><title>GPU architecture</title><link>https://doks.netlify.app/docs/computer-science/gpu-architecture/</link><pubDate>Fri, 28 Oct 2022 22:56:10 +0900</pubDate><guid>https://doks.netlify.app/docs/computer-science/gpu-architecture/</guid><description/></item><item><title>Type system</title><link>https://doks.netlify.app/docs/computer-science/type-system/</link><pubDate>Fri, 28 Oct 2022 21:36:34 +0900</pubDate><guid>https://doks.netlify.app/docs/computer-science/type-system/</guid><description>Strong vs weak typing #
[!todo]
Static vs dynamic type checking #
Static type checking is the process of verifying the type safety of a program with its source code, whereas dynamic type checking does at runtime. Static type checking can be seen as an optimization because it reduces various type safety checking at runtime. Still, many languages do both static and dynamic type checking. For example, Java is statically-typed language but every objects still have runtime type information (RTTI).</description></item><item><title>Floating point</title><link>https://doks.netlify.app/docs/computer-science/floating-point/</link><pubDate>Thu, 27 Oct 2022 14:09:33 +0900</pubDate><guid>https://doks.netlify.app/docs/computer-science/floating-point/</guid><description>Computers represent real numbers as something called floating point numbers. The reason why they are called like this is that radix point can float anywhere between the significant digits. So this is kind of scientific notation where numbers are represented with exponent and significand.
Format #
Most commonly used floating point representation follows IEEE 754 standard.
1 sign bit to represent the sign of the number. 0 for positive numbers, 1 for negative numbers.</description></item></channel></rss>